<?php

namespace DenielWorld\shoghitunnel\antibook;

use pocketmine\event\inventory\InventoryTransactionEvent;
use pocketmine\item\WrittenBook;
use pocketmine\level\format\Chunk;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerEditBookEvent;
use pocketmine\item\Item;
use pocketmine\tile\Container;

class AntiBookExploitListener implements Listener{

    //Afaik this is also the vanilla limitation, which PM forgets to implement #BlameSander
    public const MAX_PAGES_PER_BOOK = 50;

    public const MAX_BOOK_BYTES_PER_CHUNK = 637500;//This is equivalent to 50 fully written books, and about 2/3 of a chunk's storage

    public function onChunk(PlayerEditBookEvent $event){
        if(count($event->getNewBook()->getPages()) >= self::MAX_PAGES_PER_BOOK){
            $event->setCancelled();
        }
    }

    public function onInvTransaction(InventoryTransactionEvent $event){
        $player = $event->getTransaction()->getSource();

        foreach ($event->getTransaction()->getActions() as $action){
            if($action->getTargetItem() instanceof WrittenBook or $action->getSourceItem() instanceof WrittenBook){
                $bookBytesInChunk = $this->calculateBookBytesInChunk($player->chunk);

                if($bookBytesInChunk > self::MAX_BOOK_BYTES_PER_CHUNK)
                    $event->setCancelled();
            }
        }
    }

    public function calculateBookBytesInChunk(Chunk $chunk) : int{
        $bookBytesInChunk = 0;
        foreach ($chunk->getTiles() as $tile){
            if($tile instanceof Container){
                foreach ($tile->getRealInventory()->all(Item::get(Item::WRITTEN_BOOK)) as $writtenBook){
                    $bookBytesInChunk += count($writtenBook->getPages()) * 255;
                }
            }
        }

        return $bookBytesInChunk;
    }
}